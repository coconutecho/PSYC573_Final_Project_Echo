dfm <- dfm %>% mutate(Soc.Context = case_when(
is.na(Who) ~ "NA",
Who == "nobody" ~ "Alone",
Who == "baby" ~ "baby",
grepl(paste(close, collapse = "|"), Who) &
!grepl(paste(distant, collapse = "|"), Who) &
!grepl("nobody", Who, fixed = TRUE) ~ "Close",
!grepl(paste(close, collapse = "|"), Who) &
grepl(paste(distant, collapse = "|"), Who) &
!grepl("nobody", Who, fixed = TRUE) ~ "Distant",
grepl(paste(close, collapse = "|"), Who) &
grepl(paste(distant, collapse = "|"), Who) &
!grepl("nobody", Who, fixed = TRUE) ~ "Mix",
.default = "Other"
))
dfm$Soc.Context[!dfm$Soc.Context %in% c("Alone", "Close", "Mix", "Distant", "baby")] <- NA
# Code for being with the baby
dfm$Baby <- ifelse(grepl("baby", dfm$Who), 1, 0)
# It seems like some of the examples are called e.g. and some e.g.,
dfm$Doing <- gsub("e.g.,", "e.g.", dfm$Doing)
# Define groups
productive <- c("work or other productive activities", "chores/errands",
"personal maintenance",
"transit")
social_face <- c("socializing face-to-face")
social_virtual <- c("socializing virtually")
screen_time_leisure <- c("movies", "using social media")
exercise <- c("exercising/playing a sport")
rest_sleep <- c("sleeping/napping", "doing absolutely nothing")
baby_care <- c("feeding the baby", "changing the baby")
# Classify activities into categories, accounting for multiple selections, modified including other option
dfm <- dfm %>%
mutate(
Productive = ifelse(grepl(paste(productive, collapse = "|"), Doing, ignore.case = TRUE), "Productive Activities", NA),
Social_Face = ifelse(grepl(paste(social_face, collapse = "|"), Doing, ignore.case = TRUE), "Socializing Face-to-Face", NA),
Social_Virtual = ifelse(grepl(paste(social_virtual, collapse = "|"), Doing, ignore.case = TRUE), "Socializing Virtually", NA),
Screen_Time_Leisure = ifelse(grepl(paste(screen_time_leisure, collapse = "|"), Doing, ignore.case = TRUE), "Screen Time (Leisure)", NA),
Exercise = ifelse(grepl(paste(exercise, collapse = "|"), Doing, ignore.case = TRUE), "Exercise", NA),
Rest_Sleep = ifelse(grepl(paste(rest_sleep, collapse = "|"), Doing, ignore.case = TRUE), "Rest and Sleep", NA),
Baby_Care = ifelse(grepl(paste(baby_care, collapse = "|"), Doing, ignore.case = TRUE), "Baby Care", NA)
) %>%
rowwise() %>%
mutate(
# Combine all categories into a single string, separated by commas
Activity.Category = paste(na.omit(unique(c(Productive, Social_Face, Social_Virtual, Screen_Time_Leisure, Exercise, Rest_Sleep, Baby_Care))), collapse = ", "),
# If more than one category is identified, set as "Other"
# Activity.Category = ifelse(grepl(",", Activity.Category), "Other", Activity.Category),
# Label as "Other" if no category is identified but `Doing` is not NA
Activity.Category = ifelse(Activity.Category == "" & !is.na(Doing), "Other", Activity.Category)
) %>%
ungroup() %>%
# Optionally remove intermediate columns
select(-Productive, -Social_Face, -Social_Virtual, -Screen_Time_Leisure, -Exercise, -Rest_Sleep, -Baby_Care)
# View unique combinations of categories
unique_categories <- unique(dfm$Activity.Category)
# Table showing distribution of all unique categories
social_table <- as.data.frame(table(dfm$Activity.Category))
print(social_table)
View(social_table)
# Creating a model that aggregates across composites for one per entry
dfm.ag <- dfm %>%
dplyr::group_by(record_id, Composite, Activity.Category, DAY, SIG, Duration..in.seconds.) %>%
dplyr::summarise(across(where(is.numeric), ~mean(.x, na.rm = TRUE)))%>%  # This is modeling each signal separately
ungroup()
#####
# Centering within and between person for each emotion
#####
dfm.ag <- dfm.ag %>% group_by(record_id, Composite) %>%
dplyr::mutate(w_mean = mean(value, na.rm = T)) %>% ungroup() %>%
dplyr::mutate(value_bc = scale(value, center = T, scale = F),
value_wc = value - w_mean)
dfm.ag <- dfm.ag %>%
mutate(
Composite = as.factor(Composite),
Activity.Category = as.factor(Activity.Category),
value = as.numeric(value)
)
print (dfm.ag)
## plotting
ggplot(
dfm.ag[!is.na(dfm.ag$Activity.Category) & dfm.ag$Activity.Category != "" &
dfm.ag$Composite != "Other" & dfm.ag$Activity.Category != "Mix",],
aes(x = Composite, y = value, fill = Activity.Category)
) +
my_opts +
stat_summary(fun.y = mean, geom = "bar", position = position_dodge(width = 0.95), alpha = 0.7) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.95)) +
labs(
x = "Emotion",
y = "How do you feel right now?"
) +
my_opts +
coord_cartesian(ylim = c(1, 3.5)) +
theme(legend.position = "right")
# Adding the data to make sure we can see it
ggplot(dfm.ag[dfm.ag$Composite == "NegAff" & !is.na(dfm.ag$Activity.Category) & dfm.ag$Activity.Category != "" & dfm.ag$Activity.Category != "Mix",], aes(x = Activity.Category, y = value, fill = Activity.Category)) + geom_point(aes(color = Activity.Category), alpha = .5, position = "jitter") +
stat_summary(fun.y = mean, geom = "bar", position=position_dodge(width=0.95), alpha = .7) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width=.3, position=position_dodge(width=0.95)) +
labs(x = "Emotion", y = "How do you feel right now?") +
my_opts + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + coord_cartesian(ylim=c(1,5))
ggplot(dfm.ag[dfm.ag$Composite == "PosAff" & !is.na(dfm.ag$Activity.Category) & dfm.ag$Activity.Category != "" & dfm.ag$Activity.Category != "Mix",], aes(x = Activity.Category, y = value, fill = Activity.Category)) + geom_point(aes(color = Activity.Category), alpha = .5, position = "jitter") +
stat_summary(fun.y = mean, geom = "bar", position=position_dodge(width=0.95), alpha = .7) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width=.3, position=position_dodge(width=0.95)) +
labs(x = "Emotion", y = "How do you feel right now?") +
my_opts + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + coord_cartesian(ylim=c(1,5))
### Running the models
# Changing the reference
### baseline as Rest,
dfm.ag$Activity.Category <- relevel(as.factor(dfm.ag$Activity.Category), ref="Rest and Sleep")
# Comparing a big model with positive and negative affect
Activity.Category.fit <- lme(value ~  Composite*Activity.Category, data=dfm.ag[!dfm.ag$Activity.Category %in% c("Mix") & dfm.ag$Composite %in% c("NegAff", "PosAff"),], random=~1 | record_id, na.action=na.omit)
Activity.Category.fit <- lme(value_wc ~  Composite*Activity.Category, data=dfm.ag[!dfm.ag$Activity.Category %in% c("Mix") & dfm.ag$Composite %in% c("NegAff", "PosAff"),], random=~1 | record_id, na.action=na.omit)
anova(Activity.Category.fit)
summary(Activity.Category.fit)
# Comparing activity catergory for negative affect
Activity.Category.fit <- lme(value_wc ~ Activity.Category, random=~1 | record_id, na.action=na.omit, data=dfm.ag[!dfm.ag$Activity.Category %in% c("Mix") & dfm.ag$Composite %in% c("NegAff"),], control=lmeControl(opt='optim'))
anova(Activity.Category.fit)
summary(Activity.Category.fit)
# Comparing alone, baby, close, and distant for Positive affect
Activity.Category.fit <- lme(value_wc ~ Activity.Category, random=~1 | record_id, na.action=na.omit, data=dfm.ag[!dfm.ag$Activity.Category %in% c("Mix") & dfm.ag$Composite %in% c("PosAff"),], control=lmeControl(opt='optim'))
anova(Activity.Category.fit)
summary(Activity.Category.fit)
# Checking with the model effects
library(effects)
e <- allEffects(Activity.Category.fit)
print(e)
plot(e)
e1 <- e[[1]]
e.df <- as.data.frame(e1)
# Filter out rows where Activity.Category is empty or NA
e.df <- e.df[!is.na(e.df$Activity.Category) & e.df$Activity.Category != "", ]
# Create the plot
ggplot(e.df, aes(x = Activity.Category, y = fit, color = Activity.Category, ymin = lower, ymax = upper)) +
geom_pointrange(position = position_dodge(width = 0.1)) +
labs(x = "", y = "Predicted Value")
######
# Doing a more focus approach on screentime and socializing
### baseline as Rest,
dfm.ag$Activity.Category <- relevel(as.factor(dfm.ag$Activity.Category), ref="Screen Time (Leisure)")
# Comparing a big model with positive and negative affect
Activity.Category.fit <- lme(value ~  Composite*Activity.Category, data=dfm.ag[dfm.ag$Activity.Category %in% c("Screen Time (Leisure)", "Baby Care", "Socializing Face-to-Face", "Socializing Virtually") & dfm.ag$Composite %in% c("NegAff", "PosAff"),], random=~1 | record_id, na.action=na.omit)
Activity.Category.fit <- lme(value_wc ~  Composite*Activity.Category, data=dfm.ag[dfm.ag$Activity.Category %in% c("Screen Time (Leisure)", "Baby Care", "Socializing Face-to-Face", "Socializing Virtually") & dfm.ag$Composite %in% c("NegAff", "PosAff"),], random=~1 | record_id, na.action=na.omit)
anova(Activity.Category.fit)
summary(Activity.Category.fit)
# Comparing activity catergory for negative affect
Activity.Category.fit <- lme(value_wc ~ Activity.Category, random=~1 | record_id, na.action=na.omit, data=dfm.ag[dfm.ag$Activity.Category %in% c("Screen Time (Leisure)", "Baby Care", "Socializing Face-to-Face", "Socializing Virtually") & dfm.ag$Composite %in% c("NegAff"),], control=lmeControl(opt='optim'))
anova(Activity.Category.fit)
summary(Activity.Category.fit)
# Comparing alone, baby, close, and distant for Positive affect
Activity.Category.fit <- lme(value_wc ~ Activity.Category, random=~1 | record_id, na.action=na.omit, data=dfm.ag[dfm.ag$Activity.Category %in% c("Screen Time (Leisure)", "Baby Care", "Socializing Face-to-Face", "Socializing Virtually") & dfm.ag$Composite %in% c("PosAff"),], control=lmeControl(opt='optim'))
anova(Activity.Category.fit)
summary(Activity.Category.fit)
# Checking with the model effects
library(effects)
e <- allEffects(Activity.Category.fit)
print(e)
plot(e)
e1 <- e[[1]]
e.df <- as.data.frame(e1)
# Filter out rows where Activity.Category is empty or NA
e.df <- e.df[!is.na(e.df$Activity.Category) & e.df$Activity.Category != "", ]
# Create the plot
ggplot(e.df, aes(x = Activity.Category, y = fit, color = Activity.Category, ymin = lower, ymax = upper)) +
geom_pointrange(position = position_dodge(width = 0.1)) +
labs(x = "", y = "Predicted Value")
####
### Updated code with Mark's suggestion
# Add dummy-coded columns for activity categories
dfm <- dfm %>%
mutate(
Productive = ifelse(grepl(paste(productive, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Face = ifelse(grepl(paste(social_face, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Virtual = ifelse(grepl(paste(social_virtual, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Screen_Time_Leisure = ifelse(grepl(paste(screen_time_leisure, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Exercise = ifelse(grepl(paste(exercise, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Rest_Sleep = ifelse(grepl(paste(rest_sleep, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Baby_Care = ifelse(grepl(paste(baby_care, collapse = "|"), Doing, ignore.case = TRUE), 1, 0)
) %>%
rowwise() %>%
mutate(
# Combine all categories into a single string, separated by commas
Activity.Category = paste(
na.omit(unique(c(
ifelse(Productive == 1, "Productive Activities", NA),
ifelse(Social_Face == 1, "Socializing Face-to-Face", NA),
ifelse(Social_Virtual == 1, "Socializing Virtually", NA),
ifelse(Screen_Time_Leisure == 1, "Screen Time (Leisure)", NA),
ifelse(Exercise == 1, "Exercise", NA),
ifelse(Rest_Sleep == 1, "Rest and Sleep", NA),
ifelse(Baby_Care == 1, "Baby Care", NA)
))),
collapse = ", "
),
# If more than one category is identified, set as "Other"
# Activity.Category = ifelse(grepl(",", Activity.Category), "Other", Activity.Category),
# Label as "Other" if no category is identified but `Doing` is not NA
Activity.Category = ifelse(Activity.Category == "" & !is.na(Doing), "Other", Activity.Category)
) %>%
ungroup()
# Check unique combinations of categories
unique_categories <- unique(dfm$Activity.Category)
# Distribution table for activity categories
social_table <- as.data.frame(table(dfm$Activity.Category))
print(social_table)
View(social_table)
# Creating a model that aggregates across composites for one per entry
dfm.ag <- dfm %>%
dplyr::group_by(record_id, Composite, Activity.Category, DAY, SIG, Duration..in.seconds.) %>%
dplyr::summarise(across(where(is.numeric), ~mean(.x, na.rm = TRUE)))%>%  # This is modeling each signal separately
ungroup()
#####
# Centering within and between person for each emotion
#####
dfm.ag <- dfm.ag %>% group_by(record_id, Composite) %>%
dplyr::mutate(w_mean = mean(value, na.rm = T)) %>% ungroup() %>%
dplyr::mutate(value_bc = scale(value, center = T, scale = F),
value_wc = value - w_mean)
dfm.ag <- dfm.ag %>%
mutate(
Composite = as.factor(Composite),
Activity.Category = as.factor(Activity.Category),
value = as.numeric(value)
)
print (dfm.ag)
### Fitting the upated model
# Comparing a big model with positive and negative affect, including each activity category
Activity.Category.fit <- lme(
value_wc ~ Composite * Productive + Composite * Social_Face + Composite * Social_Virtual +
Composite * Screen_Time_Leisure + Composite * Exercise + Composite * Rest_Sleep + Composite * Baby_Care,
data = dfm.ag[!dfm.ag$Activity.Category %in% c("Mix") & dfm.ag$Composite %in% c("NegAff", "PosAff"),],
random = ~1 | record_id,
na.action = na.omit,
control = lmeControl(opt = 'optim')
)
anova(Activity.Category.fit)
summary(Activity.Category.fit)
# Comparing activity categories for negative affect
Activity.Category.fit_neg <- lme(
value_wc ~ Productive + Social_Face + Social_Virtual + Screen_Time_Leisure + Exercise + Rest_Sleep + Baby_Care,
random = ~1 | record_id,
na.action = na.omit,
data = dfm.ag[!dfm.ag$Activity.Category %in% c("Mix") & dfm.ag$Composite %in% c("NegAff"),],
control = lmeControl(opt = 'optim')
)
anova(Activity.Category.fit_neg)
summary(Activity.Category.fit_neg)
# Comparing activity categories for positive affect
Activity.Category.fit_pos <- lme(
value_wc ~ Productive + Social_Face + Social_Virtual + Screen_Time_Leisure + Exercise + Rest_Sleep + Baby_Care,
random = ~1 | record_id,
na.action = na.omit,
data = dfm.ag[!dfm.ag$Activity.Category %in% c("Mix") & dfm.ag$Composite %in% c("PosAff"),],
control = lmeControl(opt = 'optim')
)
anova(Activity.Category.fit_pos)
summary(Activity.Category.fit_pos)
# Data Cleaning
dfm$Doing <- gsub("e.g.,", "e.g.", dfm$Doing)
# Define groups
productive <- c("work or other productive activities", "chores/errands",
"personal maintenance",
"transit")
social_face <- c("socializing face-to-face")
social_virtual <- c("socializing virtually")
screen_time_leisure <- c("movies", "using social media")
exercise <- c("exercising/playing a sport")
rest_sleep <- c("sleeping/napping", "doing absolutely nothing")
baby_care <- c("feeding the baby", "changing the baby")
# Classify activities into categories, accounting for multiple selections, modified including other option, dummy coding each activity
dfm <- dfm %>%
mutate(
Productive = ifelse(grepl(paste(productive, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Face = ifelse(grepl(paste(social_face, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Virtual = ifelse(grepl(paste(social_virtual, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Screen_Time_Leisure = ifelse(grepl(paste(screen_time_leisure, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Exercise = ifelse(grepl(paste(exercise, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Rest_Sleep = ifelse(grepl(paste(rest_sleep, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Baby_Care = ifelse(grepl(paste(baby_care, collapse = "|"), Doing, ignore.case = TRUE), 1, 0)
) %>%
rowwise() %>%
mutate(
# Combine all categories into a single string, separated by commas
Activity.Category = paste(
na.omit(unique(c(
ifelse(Productive == 1, "Productive Activities", NA),
ifelse(Social_Face == 1, "Socializing Face-to-Face", NA),
ifelse(Social_Virtual == 1, "Socializing Virtually", NA),
ifelse(Screen_Time_Leisure == 1, "Screen Time (Leisure)", NA),
ifelse(Exercise == 1, "Exercise", NA),
ifelse(Rest_Sleep == 1, "Rest and Sleep", NA),
ifelse(Baby_Care == 1, "Baby Care", NA)
))),
collapse = ", "
),
# If more than one category is identified, set as "Other"
# Activity.Category = ifelse(grepl(",", Activity.Category), "Other", Activity.Category),
# Label as "Other" if no category is identified but `Doing` is not NA
Activity.Category = ifelse(Activity.Category == "" & !is.na(Doing), "Other", Activity.Category)
) %>%
ungroup()
# Creating a model that aggregates across composites for one per entry
dfm.ag <- dfm %>%
dplyr::group_by(record_id, Composite, Activity.Category, DAY, SIG, Duration..in.seconds.) %>%
dplyr::summarise(across(where(is.numeric), ~mean(.x, na.rm = TRUE)))%>%  # This is modeling each signal separately
ungroup()
dfm.ag <- dfm.ag %>% drop_na(value_wc)
# Load the packages
library(dplyr)
library(tidyr)
library(nlme)
library(ggplot2)
library(here)
library(brms)
library(readxl)  # for reading excel files
library(modelsummary)  # for summarizing data
library(cmdstanr)  # use two cores
library(posterior)
library(bayesplot)
library(knitr)
## Data Import
load("/Volumes/data/Studies/STAR/Data/EMA/Saved Environments/data_11_20_2024.RData")
dfm$Doing <- tolower(dfm$Doing)
# Data Cleaning
dfm$Doing <- gsub("e.g.,", "e.g.", dfm$Doing)
# Define groups
productive <- c("work or other productive activities", "chores/errands",
"personal maintenance",
"transit")
social_face <- c("socializing face-to-face")
social_virtual <- c("socializing virtually")
screen_time_leisure <- c("movies", "using social media")
exercise <- c("exercising/playing a sport")
rest_sleep <- c("sleeping/napping", "doing absolutely nothing")
baby_care <- c("feeding the baby", "changing the baby")
# Classify activities into categories, accounting for multiple selections, modified including other option, dummy coding each activity
dfm <- dfm %>%
mutate(
Productive = ifelse(grepl(paste(productive, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Face = ifelse(grepl(paste(social_face, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Virtual = ifelse(grepl(paste(social_virtual, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Screen_Time_Leisure = ifelse(grepl(paste(screen_time_leisure, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Exercise = ifelse(grepl(paste(exercise, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Rest_Sleep = ifelse(grepl(paste(rest_sleep, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Baby_Care = ifelse(grepl(paste(baby_care, collapse = "|"), Doing, ignore.case = TRUE), 1, 0)
) %>%
rowwise() %>%
mutate(
# Combine all categories into a single string, separated by commas
Activity.Category = paste(
na.omit(unique(c(
ifelse(Productive == 1, "Productive Activities", NA),
ifelse(Social_Face == 1, "Socializing Face-to-Face", NA),
ifelse(Social_Virtual == 1, "Socializing Virtually", NA),
ifelse(Screen_Time_Leisure == 1, "Screen Time (Leisure)", NA),
ifelse(Exercise == 1, "Exercise", NA),
ifelse(Rest_Sleep == 1, "Rest and Sleep", NA),
ifelse(Baby_Care == 1, "Baby Care", NA)
))),
collapse = ", "
),
# If more than one category is identified, set as "Other"
# Activity.Category = ifelse(grepl(",", Activity.Category), "Other", Activity.Category),
# Label as "Other" if no category is identified but `Doing` is not NA
Activity.Category = ifelse(Activity.Category == "" & !is.na(Doing), "Other", Activity.Category)
) %>%
ungroup()
# Creating a model that aggregates across composites for one per entry
dfm.ag <- dfm %>%
dplyr::group_by(record_id, Composite, Activity.Category, DAY, SIG, Duration..in.seconds.) %>%
dplyr::summarise(across(where(is.numeric), ~mean(.x, na.rm = TRUE)))%>%  # This is modeling each signal separately
ungroup()
dfm.ag <- dfm.ag %>% drop_na(value_wc)
# Data Cleaning
dfm$Doing <- gsub("e.g.,", "e.g.", dfm$Doing)
# Define groups
productive <- c("work or other productive activities", "chores/errands",
"personal maintenance",
"transit")
social_face <- c("socializing face-to-face")
social_virtual <- c("socializing virtually")
screen_time_leisure <- c("movies", "using social media")
exercise <- c("exercising/playing a sport")
rest_sleep <- c("sleeping/napping", "doing absolutely nothing")
baby_care <- c("feeding the baby", "changing the baby")
# Classify activities into categories, accounting for multiple selections, modified including other option, dummy coding each activity
dfm <- dfm %>%
mutate(
Productive = ifelse(grepl(paste(productive, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Face = ifelse(grepl(paste(social_face, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Social_Virtual = ifelse(grepl(paste(social_virtual, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Screen_Time_Leisure = ifelse(grepl(paste(screen_time_leisure, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Exercise = ifelse(grepl(paste(exercise, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Rest_Sleep = ifelse(grepl(paste(rest_sleep, collapse = "|"), Doing, ignore.case = TRUE), 1, 0),
Baby_Care = ifelse(grepl(paste(baby_care, collapse = "|"), Doing, ignore.case = TRUE), 1, 0)
) %>%
rowwise() %>%
mutate(
# Combine all categories into a single string, separated by commas
Activity.Category = paste(
na.omit(unique(c(
ifelse(Productive == 1, "Productive Activities", NA),
ifelse(Social_Face == 1, "Socializing Face-to-Face", NA),
ifelse(Social_Virtual == 1, "Socializing Virtually", NA),
ifelse(Screen_Time_Leisure == 1, "Screen Time (Leisure)", NA),
ifelse(Exercise == 1, "Exercise", NA),
ifelse(Rest_Sleep == 1, "Rest and Sleep", NA),
ifelse(Baby_Care == 1, "Baby Care", NA)
))),
collapse = ", "
),
# If more than one category is identified, set as "Other"
# Activity.Category = ifelse(grepl(",", Activity.Category), "Other", Activity.Category),
# Label as "Other" if no category is identified but `Doing` is not NA
Activity.Category = ifelse(Activity.Category == "" & !is.na(Doing), "Other", Activity.Category)
) %>%
ungroup()
# Creating a model that aggregates across composites for one per entry
dfm.ag <- dfm %>%
dplyr::group_by(record_id, Composite, Activity.Category, DAY, SIG, Duration..in.seconds.) %>%
dplyr::summarise(across(where(is.numeric), ~mean(.x, na.rm = TRUE)))%>%  # This is modeling each signal separately
ungroup()
#####
# Centering within and between person for each emotion
#####
dfm.ag <- dfm.ag %>% group_by(record_id, Composite) %>%
dplyr::mutate(w_mean = mean(value, na.rm = T)) %>% ungroup() %>%
dplyr::mutate(value_bc = scale(value, center = T, scale = F),
value_wc = value - w_mean)
dfm.ag <- dfm.ag %>%
mutate(
Composite = as.factor(Composite),
Activity.Category = as.factor(Activity.Category),
value = as.numeric(value)
)
dfm.ag <- dfm.ag %>% drop_na(value_wc)
dfm.pos <- dfm.ag %>% filter(Composite == "PosAff")
dfm.neg <- dfm.ag %>% filter(Composite == "NegAff")
dfm.oth <- dfm.ag %>% filter(Composite == "Other")
df = dfm.ag
train_size <- floor(0.9 * nrow(df))
train_ind <- sample(seq_len(nrow(df)), size = train_size)
train_df <- df[train_ind, ]
test_df <- df[-train_ind, ]
test_df
## Variable Summary
## plotting
ggplot(
dfm.ag[!is.na(dfm.ag$Activity.Category) & dfm.ag$Activity.Category != "" &
dfm.ag$Composite != "Other" & dfm.ag$Activity.Category != "Mix",],
aes(x = Composite, y = value, fill = Activity.Category)
) +
my_opts +
stat_summary(fun.y = mean, geom = "bar", position = position_dodge(width = 0.95), alpha = 0.7) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.95)) +
labs(
x = "Emotion",
y = "How do you feel right now?"
) +
my_opts +
coord_cartesian(ylim = c(1, 3.5)) +
theme(legend.position = "none")
getwd()
setwd("~/Documents/GitHub/PSYC573_Final_Project_Echo")
## Model
df = dfm.ag
train_size <- floor(0.9 * nrow(df))
train_ind <- sample(seq_len(nrow(df)), size = train_size)
train_df <- df[train_ind, ]
test_df <- df[-train_ind, ]
# Create the matrix `g` from binary indicator columns
# Replace the column names below with the actual names of your binary columns
binary_columns <- c("Productive", "Social_Face", "Social_Virtual",
"Screen_Time_Leisure", "Exercise", "Rest_Sleep", "Baby_Care")
# observations
g <- as.matrix(train_df[binary_columns])
y <- train_df$value_wc
test_g <- as.matrix(test_df[binary_columns])
test_y <- train_df$value_wc
# Number of activities (columns in g)
J <- ncol(g)
# Number of observations (rows in g)
N <- nrow(g)
# Prepare the data list for Stan
stan_data <- list(
J = J,      # Number of clusters (activities)
N = N,      # Number of observations
y = y,      # Response variable
g = g       # Transpose g to match Stan's `J x N` format
)
# Load and compile the Stan model
model <- cmdstan_model("model.stan")
n_chains <- 4
# Fit the model using sampling
fit <- model$sample(
data = stan_data,
chains = n_chains,                 # Number of chains
parallel_chains = n_chains,        # Run chains in parallel
iter_sampling = 5000,       # Number of iterations
iter_warmup = 1000,         # Number of warmup iterations
thin = 5                    # thinning
)
## Results
# Print a summary of the model results
summary <- fit$summary(variables = c("a", "b", "sigma"))
# fit$cmdstan_diagnose()       # Diagnose any issues
fit$draws(variables = c("a", "b", "sigma")) %>% bayesplot::mcmc_trace()  # Trace plot
posterior_predictive <- fit$draws(variables = "ytilde")
# Convert posterior predictive samples to a matrix
y_tilde_matrix <- posterior::as_draws_matrix(posterior_predictive)
# Perform posterior predictive density overlay
bayesplot::ppc_dens_overlay(y[1:125], y_tilde_matrix[,1:125])
# pp_check(fit)
